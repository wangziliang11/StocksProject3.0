"""
备用板块数据源
当AKShare API无法访问时，提供静态的板块成分股数据
"""

import pandas as pd
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

class BackupSectorData:
    """备用板块数据管理器"""
    
    def __init__(self):
        """初始化备用数据"""
        self._industry_data = self._init_industry_data()
        self._concept_data = self._init_concept_data()
    
    def _init_industry_data(self) -> Dict[str, List[Dict[str, str]]]:
        """初始化行业板块数据"""
        return {
            "银行": [
                {"代码": "000001", "名称": "平安银行"},
                {"代码": "002142", "名称": "宁波银行"},
                {"代码": "600000", "名称": "浦发银行"},
                {"代码": "600036", "名称": "招商银行"},
                {"代码": "601166", "名称": "兴业银行"},
                {"代码": "601328", "名称": "交通银行"},
                {"代码": "601398", "名称": "工商银行"},
                {"代码": "601939", "名称": "建设银行"},
                {"代码": "601988", "名称": "中国银行"},
            ],
            "医药生物": [
                {"代码": "000538", "名称": "云南白药"},
                {"代码": "000661", "名称": "长春高新"},
                {"代码": "002007", "名称": "华兰生物"},
                {"代码": "002422", "名称": "科伦药业"},
                {"代码": "300015", "名称": "爱尔眼科"},
                {"代码": "300142", "名称": "沃森生物"},
                {"代码": "600276", "名称": "恒瑞医药"},
                {"代码": "600521", "名称": "华海药业"},
                {"代码": "600867", "名称": "通化东宝"},
            ],
            "电子": [
                {"代码": "000725", "名称": "京东方A"},
                {"代码": "002415", "名称": "海康威视"},
                {"代码": "002475", "名称": "立讯精密"},
                {"代码": "300059", "名称": "东方财富"},
                {"代码": "300750", "名称": "宁德时代"},
                {"代码": "600584", "名称": "长电科技"},
                {"代码": "002230", "名称": "科大讯飞"},
            ],
            "食品饮料": [
                {"代码": "000568", "名称": "泸州老窖"},
                {"代码": "000858", "名称": "五粮液"},
                {"代码": "002304", "名称": "洋河股份"},
                {"代码": "600519", "名称": "贵州茅台"},
                {"代码": "600887", "名称": "伊利股份"},
                {"代码": "000596", "名称": "古井贡酒"},
            ],
            "房地产": [
                {"代码": "000002", "名称": "万科A"},
                {"代码": "000069", "名称": "华侨城A"},
                {"代码": "600048", "名称": "保利发展"},
                {"代码": "600340", "名称": "华夏幸福"},
                {"代码": "001979", "名称": "招商蛇口"},
            ]
        }
    
    def _init_concept_data(self) -> Dict[str, List[Dict[str, str]]]:
        """初始化概念板块数据"""
        return {
            "新能源汽车": [
                {"代码": "300750", "名称": "宁德时代"},
                {"代码": "002594", "名称": "比亚迪"},
                {"代码": "300014", "名称": "亿纬锂能"},
                {"代码": "002460", "名称": "赣锋锂业"},
                {"代码": "300073", "名称": "当升科技"},
                {"代码": "002812", "名称": "恩捷股份"},
            ],
            "人工智能": [
                {"代码": "002230", "名称": "科大讯飞"},
                {"代码": "300059", "名称": "东方财富"},
                {"代码": "002415", "名称": "海康威视"},
                {"代码": "000977", "名称": "浪潮信息"},
                {"代码": "300496", "名称": "中科创达"},
            ],
            "5G": [
                {"代码": "000063", "名称": "中兴通讯"},
                {"代码": "600050", "名称": "中国联通"},
                {"代码": "600941", "名称": "中国移动"},
                {"代码": "002475", "名称": "立讯精密"},
                {"代码": "300136", "名称": "信维通信"},
            ],
            "芯片": [
                {"代码": "000725", "名称": "京东方A"},
                {"代码": "600584", "名称": "长电科技"},
                {"代码": "002049", "名称": "紫光国微"},
                {"代码": "300661", "名称": "圣邦股份"},
                {"代码": "688981", "名称": "中芯国际"},
            ],
            "电池": [
                {"代码": "300750", "名称": "宁德时代"},
                {"代码": "002594", "名称": "比亚迪"},
                {"代码": "300014", "名称": "亿纬锂能"},
                {"代码": "002460", "名称": "赣锋锂业"},
                {"代码": "300073", "名称": "当升科技"},
            ],
            "液冷服务器": [
                {"代码": "002185", "名称": "华天科技"},
                {"代码": "002384", "名称": "东山精密"},
                {"代码": "002475", "名称": "立讯精密"},
                {"代码": "300496", "名称": "中科创达"},
                {"代码": "300661", "名称": "圣邦股份"},
                {"代码": "600584", "名称": "长电科技"},
                {"代码": "688981", "名称": "中芯国际"},
            ],
            "芯片概念": [
                {"代码": "688981", "名称": "中芯国际"},
                {"代码": "002185", "名称": "华天科技"},
                {"代码": "600584", "名称": "长电科技"},
                {"代码": "300661", "名称": "圣邦股份"},
                {"代码": "002049", "名称": "紫光国微"},
                {"代码": "300782", "名称": "卓胜微"},
                {"代码": "300223", "名称": "北京君正"},
            ]
        }
    
    def get_industry_constituents(self, industry_name: str) -> Optional[pd.DataFrame]:
        """
        获取行业成分股
        
        Args:
            industry_name: 行业名称
            
        Returns:
            包含成分股信息的DataFrame，如果没有找到则返回None
        """
        try:
            if industry_name in self._industry_data:
                data = self._industry_data[industry_name]
                df = pd.DataFrame(data)
                df['symbol'] = df['代码']
                df['name'] = df['名称']
                logger.info(f"从备用数据源获取到行业 '{industry_name}' 的 {len(df)} 只成分股")
                return df
            else:
                logger.warning(f"备用数据源中未找到行业: {industry_name}")
                return None
        except Exception as e:
            logger.error(f"从备用数据源获取行业成分股失败: {e}")
            return None
    
    def get_concept_constituents(self, concept_name: str) -> Optional[pd.DataFrame]:
        """
        获取概念成分股
        
        Args:
            concept_name: 概念名称
            
        Returns:
            包含成分股信息的DataFrame，如果没有找到则返回None
        """
        try:
            if concept_name in self._concept_data:
                data = self._concept_data[concept_name]
                df = pd.DataFrame(data)
                df['symbol'] = df['代码']
                df['name'] = df['名称']
                logger.info(f"从备用数据源获取到概念 '{concept_name}' 的 {len(df)} 只成分股")
                return df
            else:
                logger.warning(f"备用数据源中未找到概念: {concept_name}")
                return None
        except Exception as e:
            logger.error(f"从备用数据源获取概念成分股失败: {e}")
            return None
    
    def get_available_industries(self) -> List[str]:
        """获取可用的行业列表"""
        return list(self._industry_data.keys())
    
    def get_available_concepts(self) -> List[str]:
        """获取可用的概念列表"""
        return list(self._concept_data.keys())
    
    def is_available(self, sector_name: str) -> bool:
        """检查板块是否在备用数据中可用"""
        return (sector_name in self._industry_data or 
                sector_name in self._concept_data)

# 全局实例
backup_sector_data = BackupSectorData()